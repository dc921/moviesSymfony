<?php

namespace WP\PlatformBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * MovieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovieRepository extends \Doctrine\ORM\EntityRepository {

    public function getMovieWithDirectorId($id) {
        $query = $this->createQueryBuilder('m');
        $query->leftJoin('m.directors', 'd')
                ->where($query->expr()->in('d.id', $id))
                ->addSelect('d');

        return $query
                        ->getQuery()
                        ->getResult();
    }

    public function getRecentMovies($page, $nbPerPage) {
        $query = $this->createQueryBuilder('m')
                ->leftJoin('m.image', 'i')
                ->addSelect('i')
                ->leftJoin('m.directors', 'd')
                ->addSelect('d')
                ->orderBy('m.id', 'DESC')
                ->getQuery();

        $query->setFirstResult(($page - 1) * $nbPerPage)->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function getMovieSearch($page, $nbPerPage, $searchString, $genre, $tolerance = 3) {
        if ($genre == "all") {
            $query = $this->_em->createQueryBuilder()
                    ->select('movie')
                    ->from('WPPlatformBundle:Movie', 'movie')
                    ->leftJoin('movie.genres', 'g')
                    ->addSelect('g')
                    ->where('LEVENSHTEIN(movie.title, :searchString) <= :tolerance')
                    ->orWhere('movie.title LIKE :search')
                    ->setParameter('searchString', $searchString)
                    ->setParameter('tolerance', $tolerance)
                    ->setParameter('search', '%' . $searchString . '%')
            ;
        } else {
            $query = $this->_em->createQueryBuilder()
                    ->select('movie')
                    ->from('WPPlatformBundle:Movie', 'movie')
                    ->leftJoin('movie.genres', 'g')
                    ->addSelect('g')
                    ->where('LEVENSHTEIN(movie.title, :searchString) <= :tolerance')
                    ->orWhere('movie.title LIKE :search')
                    ->andWhere('g.genre = :genre')
                    ->setParameter('genre', $genre)
                    ->setParameter('searchString', $searchString)
                    ->setParameter('tolerance', $tolerance)
                    ->setParameter('search', '%' . $searchString . '%')
            ;
        }

        $query->setFirstResult(($page - 1) * $nbPerPage)->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

}
